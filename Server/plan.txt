const DonHang = require('../models/DonHang'); // Mô hình đơn hàng

exports.tinhTongDoanhThu = async (req, res) => {
    try {
        const tongDoanhThu = await DonHang.aggregate([
            {
                $match: { trangThai: 'đã thanh toán' }
            },
            {
                $group: {
                    _id: null, // Nhóm tất cả
                    tongDoanhThu: { $sum: '$tongTien' } // Tính tổng doanh thu
                }
            }
        ]);
        res.status(200).json(tongDoanhThu);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};
B. Thống kê doanh thu theo ngày
javascript
Copy code
exports.thongKeDoanhThuTheoNgay = async (req, res) => {
    try {
        const doanhThuTheoNgay = await DonHang.aggregate([
            {
                $match: { trangThai: 'đã thanh toán' }
            },
            {
                $group: {
                    _id: { $dateToString: { format: "%Y-%m-%d", date: "$ngayDat" } }, // Nhóm theo ngày
                    tongDoanhThu: { $sum: '$tongTien' } // Tính tổng doanh thu
                }
            },
            {
                $sort: { _id: 1 } // Sắp xếp theo ngày
            }
        ]);

        res.status(200).json(doanhThuTheoNgay);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};
C. Thống kê doanh thu theo sản phẩm
Để lấy doanh thu theo từng sản phẩm, bạn sẽ cần kết hợp bảng chi tiết đơn hàng và bảng sản phẩm:

javascript
Copy code
const ChiTietDonHang = require('../models/ChiTietDonHang'); // Mô hình chi tiết đơn hàng
const SanPham = require('../models/SanPham'); // Mô hình sản phẩm

exports.thongKeDoanhThuTheoSanPham = async (req, res) => {
    try {
        const doanhThuTheoSanPham = await ChiTietDonHang.aggregate([
            {
                $lookup: {
                    from: 'donhang', // Tên bảng đơn hàng trong MongoDB
                    localField: 'donHangId',
                    foreignField: '_id',
                    as: 'donHang'
                }
            },
            {
                $unwind: '$donHang' // Giải nén mảng donHang
            },
            {
                $match: { 'donHang.trangThai': 'đã thanh toán' } // Lọc đơn hàng đã thanh toán
            },
            {
                $group: {
                    _id: '$sanPhamId', // Nhóm theo ID sản phẩm
                    doanhThu: { $sum: { $multiply: ['$soLuong', '$gia'] } } // Tính doanh thu
                }
            },
            {
                $lookup: {
                    from: 'sanpham', // Tên bảng sản phẩm trong MongoDB
                    localField: '_id',
                    foreignField: '_id',
                    as: 'sanPham'
                }
            },
            {
                $unwind: '$sanPham' // Giải nén mảng sanPham
            },
            {
                $project: {
                    _id: 1,
                    tenSanPham: '$sanPham.ten',
                    doanhThu: 1
                }
            },
            {
                $sort: { doanhThu: -1 } // Sắp xếp theo doanh thu giảm dần
            }
        ]);

        res.status(200).json(doanhThuTheoSanPham);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};















exports.deleteLoaiSP = async (req, res) => {
    const { loaispId } = req.body; // LoaiSP cần xóa, truyền vào trong body

    try {
        // Bước 1: Tìm loại sản phẩm (LoaiSP) cần xóa
        const loaisp = await Loaisp.findById(loaispId).populate('listLoaiSPConID');
        if (!loaisp) {
            return res.status(404).json({ error: "LoaiSP không tồn tại!" });
        }

        // Bước 2: Kiểm tra tất cả các sản phẩm con (LoaiSPCon) xem có sản phẩm nào liên quan không
        let canDeleteLoaiSP = true; // Biến kiểm tra nếu có thể xóa LoaiSP

        for (let loaispcon of loaisp.listLoaiSPConID) {
            if (loaispcon.sp && loaispcon.sp.length > 0) {
                // Nếu LoaiSPCon có chứa sản phẩm (sp) thì không xóa LoaiSP
                canDeleteLoaiSP = false;
                break; // Dừng lại nếu tìm thấy sản phẩm
            }
        }

        // Bước 3: Nếu không có sản phẩm con nào chứa sản phẩm, thực hiện xóa LoaiSP và các LoaiSPCon
        if (canDeleteLoaiSP) {
            // Xóa LoaiSPCon trước nếu cần thiết
            await LoaispCon.deleteMany({ _id: { $in: loaisp.listLoaiSPConID } });

            // Sau đó xóa LoaiSP
            await loaisp.remove();

            return res.status(200).json({ message: "LoaiSP và các LoaiSPCon đã được xóa thành công!" });
        } else {
            return res.status(400).json({ error: "Không thể xóa LoaiSP vì có sản phẩm con liên quan!" });
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Lỗi khi xóa LoaiSP!" });
    }
};
